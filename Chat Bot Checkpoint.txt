WORKING ONLYHTML~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Quick Health</title>    <link rel="stylesheet" href="styles.css"></head><body>    <div class="container">        <!--IPAD-->        <div class="ipad-mini">            <!--HEADER-->            <div class="header">                <h1>QUICK HEALTH</h1>                <hr class="separator">             </div>            <!--FOOTER-->            <div class="footer">                <p>Email: info@quickhealth.com</p>                <p>Phone: +1 (123) 456-7890</p>            </div>        </div>        <!--BUTTON CLASS-->            <div class="BurnsCutsButtons">                <!--BURNS NAV-->                <div id="BmyNav" class="Boverlay">                    <a href="javascript:void(0)" class="Bclosebtn" onclick="BcloseNav()">&times;</a>                    <div class="Boverlay-content">                      <a class="BNavTitle">WHAT CAN YOU ASK</a>                      <a class="BNavTitle"> </a>                      <a class="BNavTitle"> </a>                      <a class="BNavTitle"> </a>                      <a class="BNavInfo">"How do I treat a major/minor burn?"</a>                      <a class="BNavInfo">"How to I treat a burn from hot oil?"</a>                      <a class="BNavInfo">"I burned my arm on the stove. What should I do?"</a>                      <a class="BNavInfo">"I accidentally touched a hot pan and burned my hand. What should I do?"</a>                    </div>                    <button id="aiButtonBurns" class="centered-button">SPEAK WITH AI</button>                    </div>                  </div>                <!--CUTS NAV-->                  <div id="CmyNav" class="Coverlay">                    <a href="javascript:void(0)" class="Cclosebtn" onclick="CcloseNav()">&times;</a>                    <div class="Coverlay-content">                        <a class="BNavTitle">WHAT CAN YOU ASK</a>                        <a class="BNavTitle"> </a>                        <a class="BNavTitle"> </a>                        <a class="BNavTitle"> </a>                      <a class="BNavInfo">"I got a cut on my finger. How do I treat it?"</a>                      <a class="BNavInfo">"What's the best way to stop bleeding from a cut?"</a>                      <a class="BNavInfo">"How do I treat a deep cut on my hand?"</a>                      <a class="BNavInfo">"What should I do if I cut myself with a knife?"</a>                    </div>                    <button id="aiButtonCuts" class="centered-button">SPEAK WITH AI</button>                    </div>                  </div>                  <!--BUTTONS-->                  <div class="button-container">                    <button class="burns-button" onclick="BopenNav()"onclick="toggleShadow()">                        <img src="flame.png" alt="Flame icon" class="flame-icon">                        BURNS                    </button>                    <button class="cuts-button" onclick="CopenNav()"onclick="toggleShadow()">                        <img src="cut.png" alt="Cut icon" class="cut-icon">                        CUTS                    </button>                </div>            </div>            <!--AI BUTTON-->            <button id="aiButton" class="centered-button">SPEAK WITH AI</button>    </div>    <script src="script.js"></script></body></html>CSS~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/* BODY */body{  background-color: #d7e6fb;}/* CONTAINER */.container {  max-width: 280px;  max-height: 388px;   margin: 0 auto;   padding: 0px;   display: flex;   flex-direction: column;  justify-content: center;  align-items: center; }/* HEADER */.header {  text-align: center;  font-size: 20px;}.separator {  width: 100%;}/* FOOTER */.footer {  position: fixed;  left: 0;  bottom: 0;  width: 100%;  background-color: rgb(101, 101, 101);  color: white;  text-align: center;}/* AI BUTTON */.centered-button {  position: absolute;   bottom: 90px;   left: 50%;   font-size: 15px;  transform: translateX(-50%);   width: 200px;   padding: 30px;   background-color: #0056b3;   color: white;   border: none;   border-radius: 50px;   cursor: pointer;   transition: background-color 0.3s, transform 0.2s ease-in-out; }.centered-button:hover {  background-color: #003366 }.centered-button:active {  background-color: #0f2a3d; }/* SQUARE BUTTON */.BurnsCutsButtons {  position: relative;  margin-top: 30%;}.button-container {  display: flex;  flex-direction: column;  justify-content: center;  align-items: center;}.burns-button, .cuts-button {  width: 400px;  height: 150px;  margin-bottom: 10px;  padding: 10px;  border-radius: 80px;  background-color: #1E90FF;  color: white;  font-size: 30px;  text-align: center;  cursor: pointer;  transition: background-color 0.3s, transform 0.2s ease-in-out, box-shadow 0.3s;  background: linear-gradient(to right, #0daee5, #0fc8d5);  box-shadow: 0 10px 5px rgba(0, 0, 0, 0.2);  margin-top: 10px;}.burns-button:hover {  background: linear-gradient(to right, #0fc8d5, #0daee5);}.cuts-button:hover {  background: linear-gradient(to right, #0fc8d5, #0daee5);}.no-shadow {  box-shadow: none; }.flame-icon {  position: absolute;  width: 80px; /* Adjust the size of the image as needed */  height: auto;  margin-left: -120px;  margin-top: -40px;}.cut-icon {  position: absolute;  width: 120px; /* Adjust the size of the image as needed */  height: auto;  margin-left: -140px;  margin-top: -30px;}/* BURNS OVERLAY */.Boverlay {    height: 100%;  width: 0;  position: fixed;  z-index: 1;   left: 0;  top: 0;  background-color: rgb(0,0,0);   background-color: rgba(0,0,0, 0.9);   overflow-x: hidden;   transition: 0.5s;}.Boverlay-content {  position: relative;  top: 25%;   width: 100%;   text-align: center;   margin-top: 30px; }.Boverlay a {  padding: 8px;  text-decoration: none;  font-size: 36px;  color: #818181;  display: block;  transition: 0.3s; }.Boverlay a:hover, .Boverlay a:focus {  color: #f1f1f1;}.Boverlay .Bclosebtn {  position: absolute;  top: 20px;  right: 45px;  font-size: 60px;}@media screen and (max-height: 450px) {  .Boverlay a {font-size: 20px}  .Boverlay .Bclosebtn {    font-size: 40px;    top: 15px;    right: 35px;  }}/* CUTS OVERLAY */.Coverlay {  height: 100%;  width: 0;  position: fixed;  z-index: 1;  left: 0;  top: 0;  background-color: rgb(0,0,0);  background-color: rgba(0,0,0, 0.9);  overflow-x: hidden;   transition: 0.5s; }.Coverlay-content {  position: relative;  top: 25%;   width: 100%;  text-align: center;   margin-top: 30px; }.Coverlay a {  padding: 8px;  text-decoration: none;  font-size: 36px;  color: #818181;  display: block;   transition: 0.3s; }.Coverlay a:hover, .Coverlay a:focus {  color: #f1f1f1;}.Coverlay .Cclosebtn {  position: absolute;  top: 20px;  right: 45px;  font-size: 60px;}@media screen and (max-height: 450px) {  .Coverlay a {font-size: 20px}  .Coverlay .Cclosebtn {    font-size: 40px;    top: 15px;    right: 35px;  }}SERVER~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~const express = require('express');const cors = require('cors');const axios = require('axios');const { GoogleAuth } = require('google-auth-library');const app = express();const PORT = 3000;// Define the accessToken variablelet accessToken = '';// Load the service account key JSON fileconst serviceAccount = require('./health-chatbot-420906-ce340fafb930.json');// Extract private key and client email from the JSONconst privateKey = serviceAccount.private_key;const clientEmail = serviceAccount.client_email;// Configure the GoogleAuth clientconst auth = new GoogleAuth({  credentials: {    private_key: privateKey,    client_email: clientEmail  },  scopes: ['https://www.googleapis.com/auth/dialogflow']});// Obtain an access token using the Google Auth libraryauth.getAccessToken()  .then(token => {    // Assign the obtained access token to the accessToken variable    accessToken = token;    // Log the access token for debugging purposes    console.log('Access Token:', accessToken);  })  .catch(err => {    console.error('Error obtaining access token:', err);  });// Middlewareapp.use(express.json());app.use(cors());// Function to send the question to Dialogflowasync function sendToDialogflow(question, accessToken) {  const projectId = 'health-chatbot-420906';  const sessionId = '135246';  const languageCode = 'en-US';  const url = `https://dialogflow.googleapis.com/v2/projects/${projectId}/agent/sessions/${sessionId}:detectIntent`;  const requestBody = {    queryInput: {      text: {        text: question,        languageCode: languageCode,      },    },  };  const config = {    headers: {      'Content-Type': 'application/json',      'Authorization': `Bearer ${accessToken}`,    },  };  try {    const response = await axios.post(url, requestBody, config);    return response.data;  } catch (error) {    console.error('Error sending request to Dialogflow:', error);    throw new Error('Failed to send request to Dialogflow');  }}// Handle POST requests to /webhook endpointapp.post('/webhook', async (req, res) => {  try {    const question = req.body.question;    if (!question) {      throw new Error('Question is required');    }    // Send the question to Dialogflow using the accessToken    const dialogflowResponse = await sendToDialogflow(question, accessToken);    // Extract the response from Dialogflow    const fulfillmentText = dialogflowResponse.queryResult.fulfillmentText;    // Send the response back to the client    res.status(200).json({ response: fulfillmentText });  } catch (error) {    console.error('Error handling webhook request:', error);    res.status(500).json({ error: 'Internal Server Error' });  }});// Start the serverapp.listen(PORT, () => {  console.log(`Server is running on http://localhost:${PORT}`);});SCRIPT~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~// Function to handle button click eventfunction handleClick() {    // Prompt the user for a question    const question = prompt("Please enter your medical question:");    // Check if the user entered a question    if (question) {        // Send the question to the server        fetch('http://localhost:3000/webhook', {            method: 'POST',            headers: {                'Content-Type': 'application/json'            },            body: JSON.stringify({ question: question })        })        .then(response => {            if (!response.ok) {                throw new Error('Network response was not ok');            }            return response.json();        })        .then(data => {            // Handle the response from the server            alert("Response from server: " + JSON.stringify(data));        })        .catch(error => {            console.error('Error:', error);            alert("Error occurred while processing your request. Please try again later.");        });    } else {        alert("Please enter a valid question.");    }}// Add event listener to the AI buttondocument.getElementById('aiButton').addEventListener('click', handleClick);// EVENT LISTENERdocument.getElementById('aiButtonBurns').addEventListener('click', handleClick);document.getElementById('aiButtonCuts').addEventListener('click', handleClick);document.getElementById('aiButton').addEventListener('click', handleClick);// BURNS NAVfunction BopenNav() {    document.getElementById("BmyNav").style.width = "100%";}function BcloseNav() {    document.getElementById("BmyNav").style.width = "0%";}// CUTS NAVfunction CopenNav() {    document.getElementById("CmyNav").style.width = "100%";}function CcloseNav() {    document.getElementById("CmyNav").style.width = "0%";}function toggleShadow() {    var burnsButton = document.getElementById('burnsButton');    burnsButton.classList.toggle('no-shadow');}